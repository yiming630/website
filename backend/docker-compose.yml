version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-translation_platform_dev}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./databases/setup.sql:/docker-entrypoint-initdb.d/00-setup.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-translation_platform_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - translation-network

  # Redis for caching, sessions, and real-time features
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - translation-network

  # API Gateway Service (GraphQL)
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 4000
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-translation_platform_dev}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1h}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      REDIS_URL: redis://redis:6379
      WEBSOCKET_HOST: 0.0.0.0
      WEBSOCKET_PORT: 4001
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    ports:
      - "${API_GATEWAY_PORT:-4000}:4000"
      - "${WEBSOCKET_PORT:-4001}:4001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - translation-network

  # Document Processing Service
  document-service:
    build:
      context: ./services/document-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-translation_platform_dev}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      GOOGLE_CLOUD_PROJECT_ID: ${GOOGLE_CLOUD_PROJECT_ID}
      GOOGLE_CLOUD_STORAGE_BUCKET: ${GOOGLE_CLOUD_STORAGE_BUCKET}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-52428800}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES:-pdf,docx,txt,doc,rtf}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    ports:
      - "${DOCUMENT_SERVICE_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - document_uploads:/app/temp_uploads
      - document_processed:/app/processed
      - ./services/document-service:/app
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - translation-network

  # File Processing Service
  file-processing-service:
    build:
      context: ./services/file-processing-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-translation_platform_dev}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      API_GATEWAY_URL: http://api-gateway:4000
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    ports:
      - "${FILE_PROCESSING_PORT:-8001}:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    volumes:
      - file_processing_temp:/app/temp
      - ./services/file-processing-service:/app
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - translation-network

  # Collaboration Service (WebSocket for real-time features)
  collaboration-service:
    build:
      context: ./services/collaboration-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-translation_platform_dev}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      API_GATEWAY_URL: http://api-gateway:4000
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    ports:
      - "${COLLABORATION_PORT:-8002}:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    volumes:
      - ./services/collaboration-service:/app
      - /app/node_modules
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - translation-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-translation_platform_dev}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      API_GATEWAY_URL: http://api-gateway:4000
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    ports:
      - "${NOTIFICATION_PORT:-8003}:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    volumes:
      - ./services/notification-service:/app
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - translation-network

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@translation-platform.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - translation-network
    profiles:
      - development

  # Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - translation-network
    profiles:
      - development

  # Mailhog for email testing (development only)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "${MAILHOG_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    restart: unless-stopped
    networks:
      - translation-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  document_uploads:
    driver: local
  document_processed:
    driver: local
  file_processing_temp:
    driver: local
  pgadmin_data:
    driver: local

networks:
  translation-network:
    driver: bridge